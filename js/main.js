(function ($) {    var cmd = new Cmd();    (function() {        chrome.windows.getCurrent({}, function (activeWindow) {            var width = 800;            var htmlSelector = $('html');            if (activeWindow.width < 800) {                width = activeWindow.width;            }            htmlSelector.width(width);            if (activeWindow.height < 600) {                htmlSelector.height(activeWindow.height);            }        });    })();    $(document).ready(function () {        var form = $('#command');        var commandInput = $(form[0].elements.commandInput);        var commandLine = new CommandLine(commandInput);        commandLine.focus();        var historyIndex = -1;        var cachedCommand = '';        var lastTabPress = null;        commandInput.on('keydown', function(event){            // history navigate            if(event.key === "ArrowUp" || event.key === "ArrowDown"){                if(historyIndex === -1){                    cachedCommand = commandLine.getVal();                }                if(event.key === "ArrowUp"){                    if(cmd.history.hasIndex(historyIndex + 1)){                        ++historyIndex;                        commandLine.setVal(cmd.history.get(historyIndex));                    }                } else {                    if((historyIndex -1) < 0){                        commandLine.setVal(cachedCommand);                        historyIndex = -1;                    } else if(cmd.history.hasIndex(historyIndex - 1)) {                        --historyIndex;                        commandLine.setVal(cmd.history.get(historyIndex));                    }                }                event.preventDefault();                return;            }            if(event.key === "Tab" && commandLine.getVal() !== ''){                var variants = cmd.complete(commandLine.getVal());                var double = false;                var currentDate = new Date().getTime();                if (lastTabPress !== null && (currentDate - lastTabPress) < 1000) {                    double = true;                    lastTabPress = null;                } else {                    lastTabPress = currentDate;                }                                if(variants.length === 1){                    commandLine.setVal(variants[0]);                    lastTabPress = null;                } else if (variants.length > 1 && double) {                    cmd.output.print(variants.join(' '));                    lastTabPress = null;                }                event.preventDefault();            }        });        form.on('submit', function (){            historyIndex = -1;            onSubmitCommund(this);            return false;        });    });    var CommandLine = function($el){        if(!(this instanceof CommandLine)){            return new CommandLine($el);        }        var self     = this;        var selector = $($el);        this.getVal = function(){            var val = selector.val();            if (val.trim() === '' ) {                val = '';            }            return val;        };        this.setVal = function(val){            selector.val(val);        };        this.focus = function(){            selector.focus();        }    };    function onSubmitCommund(form) {        // создать команду        var command = new Command($(form.elements.commandInput).val());        // очистить ввод        $(form.elements.commandInput).val('');        // добавить в историю        cmd.history.add(command);        // выполнить.        try {            cmd.output.print('<span class="command-result">' + cmd.run(command) + '</span>');        } catch(e) {            cmd.output.printError(e.message);        }    }    function Command(inputCommand) {        var line = inputCommand,            params = line.split(' '),            commandName = params.splice(0, 1)[0];        if (!(this instanceof Command)) {            return new Command(inputCommand);        }        this.getLine = function () {            return line;        };        this.getCommandName = function(){            return commandName;        };        this.getParams = function (){            return params;        };    }    function Cmd() {        if (!(this instanceof Cmd)) {            return new Cmd();        }        this.run = function (command) {            if(command.getCommandName() === undefined){                return '';            }            if(commands[command.getCommandName()] === undefined){                throw Error('command not find');            }            return commands[command.getCommandName()](command.getParams());        };        this.complete = function(partCmd) {            // если введеная строка совпадает с какой либо частью существующих            // команд, то её необходимо вывести.            // далее следует определить, нет ли следующих одинаковых символов            var variants = [];            for (var commandName in commands) {                if (commandName.substr(0, partCmd.length) === partCmd) {                    variants.push(commandName);                }            }            var additionalCmd = partCmd;            var checkedLength = partCmd.length;            if(variants.length > 1) {                checkAdditionalCmd: {                    while (true) {                        ++checkedLength;                        if (variants[0].length < checkedLength) {                            break checkAdditionalCmd;                        }                        additionalCmd = variants[0].substr(0, checkedLength);                        for (commandName in variants) {                            if (commandName.length < checkedLength) {                                break checkAdditionalCmd;                            }                            if (commandName.substr(0, checkedLength) !== additionalCmd) {                                break checkAdditionalCmd;                            }                        }                    }                }            } else if(variants.length === 1) {                variants[0]+= ' ';            }            if(additionalCmd !== partCmd){                variants = [additionalCmd];            }            return variants;        };    }    function History()    {        if (!(this instanceof History)) {            return new History();        }        var log = [];        /**         * Добавляет команду в начало истории и обрезает историю         * @param command         */        this.add = function(command)        {            log.unshift(command.getLine());            cmd.output.print('<span>>&nbsp;</span>' +command.getLine());        };        /**         * Возвращает команду, которая вызывалась index шагов назад         * @param index         */        this.get = function (index)        {            if(this.hasIndex(index)){                return log[index];            } else {                return undefined;            }        };        this.hasIndex = function(index)        {            return log[index];        }    }    function Output() {        if (!(this instanceof Output)) {            return new Output();        }    }    Output.prototype.print = function (text)    {        $('#hint').append($('<p class="output">' + text + '</p>'));    };    Output.prototype.printError = function (error)    {        $('#hint').append($('<p class="output error">' + error + '</p>'));    };    Cmd.prototype.history = new History();    Cmd.prototype.output = new Output();    var commands = {        echo: function(params){            return params.join("<br />");        },        reload: function(){            /* reload page */            return 'run reload page';        },        restart: function() {            /* reload page */            return 'alias reload page';        },        url: function(){            /* open url*/            return 'open url';        },        help: function(){            /* show help page */            return 'show help page';        }    };    /*    работа с вкладками    // перезагружает вкладку    tab gmail reload    // сохраняет текущую вкладку как gmail для последующего доступа    tab . save gmail    // ткрывает в новой вкладке сайт google.com    tab + google.com     работа с урлами     url open https://gmail.com     */})(jQuery);